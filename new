//action.yml
name: 'Fibonacci Bot'
description: 'Scans PR content for numbers and calculates their Fibonacci numbers.'
inputs:
  enable_fib:
    description: 'Enable Fibonacci calculation'
    required: true
    default: 'false'
  threshold:
    description: 'Threshold limit for Fibonacci calculation'
    required: true
    default: '10'
runs:
  using: 'docker'
  image: 'Dockerfile'

  //Dockerfile
  FROM rust:latest

WORKDIR /usr/src/fibbot

COPY . .

RUN cargo build --release

ENTRYPOINT ["/usr/src/fibbot/target/release/fibbot"]

//post_comment.rs
use reqwest::blocking::{get, Client};
use std::env;
pub fn post_comment(pr_number: u64, comment: &str) -> Result<(), Box<dyn std::error::Error>> {
    let url = format!(
        "https://api.github.com/repos/{}/{}/issues/{}/comments",
        env::var("GITHUB_REPOSITORY_OWNER")?,
        env::var("GITHUB_REPOSITORY_NAME")?,
        pr_number
    );

    let client = Client::new();
    let payload = serde_json::json!({ "body": comment });

    client
        .post(&url)
        .header("Authorization", format!("token {}", env::var("GITHUB_TOKEN")?))
        .json(&payload)
        .send()?
        .error_for_status()?;
    
    Ok(())
}
    //get_pr.rs
    use reqwest::blocking::get;
use std::env;

 pub fn fetch_pull_request_body(pr_number: u64) -> Result<String, Box<dyn std::error::Error>> {
    let url = format!(
        "https://api.github.com/repos/{}/{}/pulls/{}",
        env::var("GITHUB_REPOSITORY_OWNER")?,
        env::var("GITHUB_REPOSITORY_NAME")?,
        pr_number
    );

    let response = get(&url)?.text()?;
    Ok(response)
}
    //fibonacci.rs
    pub fn fibonacci_up_to(max: u32) -> Vec<u32> {
    let mut fib_sequence = vec![1, 1];
    //let mut fib_sequence = Vec::new();
    while let Some(&last) = fib_sequence.last() {
        let next = fib_sequence[fib_sequence.len() - 1] + fib_sequence[fib_sequence.len() - 2];
        if max == 0 {
            fib_sequence = vec![];
            break;
        }
        if next > max {
            break;
        }
        fib_sequence.push(next);
    }
    fib_sequence.into_iter().collect() // Skip the first two (0, 1)
}

#[test]
fn test_fibonacci_up_to() {
    let result = fibonacci_up_to(10);
    assert_eq!(result, vec![1, 1, 2, 3, 5, 8]);
}
#[test]
fn test_fibonacci_up_to1() {
    let result = fibonacci_up_to(1);
    assert_eq!(result, vec![1, 1]);
}
// #[test]
// fn test_fibonacci_up_to2() {
//     let result:Vec<u32> = fibonacci_up_to(0);
//     assert!(result == vec![]);
// }


//extract.rs

 pub fn extract_numbers(content: String) -> Vec<u32> {
    content
        .split_whitespace()
        .filter_map(|word| word.trim_matches(|c: char| !c.is_digit(10)).parse::<u32>().ok())
        .filter(|&num| num > 0) // Ensure we only collect positive numbers
        .collect()
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_extract_numbers() {
        let content = "Here are some numbers: 1, 42 and 100.".to_string();
        let numbers = extract_numbers(content);
        assert_eq!(numbers, vec![1, 42, 100]);
    }
}


//main.rs
use dotenv::dotenv;
use std::env;

use extract::extract_numbers;
use fibonacci::fibonacci_up_to;
use get_pr::fetch_pull_request_body;
use post_comment::post_comment;
mod extract;
mod fibonacci;
mod get_pr;
mod post_comment;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // dotenv().ok();
    // Get parameters from environment variables
    let pr_number: u64 = env::var("PR_NUMBER")?.parse()?;
    let enable_fibonacci: bool = env::var("ENABLE_FIBONACCI")?.parse().unwrap_or(false);
    let threshold: u32 = env::var("THRESHOLD")
        .unwrap_or_else(|_| "100".to_string())
        .parse()
        .unwrap_or(100);

    // Fetch the pull request bodyc
    let body = fetch_pull_request_body(pr_number)?;

    // Extract numbers from the body
    let numbers = extract_numbers(body.clone());

    // Prepare the comment
    let mut comment = String::new();

    if enable_fibonacci {
        let mut fib_results = Vec::new();
        for &number in &numbers {
            if number <= threshold {
                fib_results.extend(fibonacci_up_to(number));
            }
        }
        comment = format!("Fibonacci numbers for extracted values: {:?}", fib_results);
    } else {
        comment = format!("Extracted numbers: {:?}", numbers);
    }

    // Post the comment
    post_comment(pr_number, &comment)?;

    Ok(())
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parameter_parsing() {
        let enable_fib = "true".to_string();
        let max_threshold: u32 = "10".parse().unwrap();

        assert_eq!(enable_fib, "true");
        assert_eq!(max_threshold, 10);
    }
}

// fn main() -> Result<(), Box<dyn std::error::Error>> {
//     // Get parameters from environment variables

//     // let enable_fibonacci: bool = env::var("ENABLE_FIBONACCI")?.parse().unwrap_or(false);
//     // let threshold: u32 = env::var("THRESHOLD").unwrap_or_else(|_| "100".to_string()).parse().unwrap_or(100);

//     // Fetch the pull request body

//     // Extract numbers from the body
//     let numbers = extract_numbers(body.clone());

//     // Prepare the comment
//     let mut comment = String::new();

//     if enable_fibonacci {
//         let mut fib_results = Vec::new();
//         for &number in &numbers {
//             if number <= threshold {
//                 fib_results.extend(fibonacci_up_to(number));
//             }
//         }
//         comment = format!(
//             "Fibonacci numbers for extracted values: {:?}",
//             fib_results
//         );
//     } else {
//         comment = format!("Extracted numbers: {:?}", numbers);
//     }

//     // Post the comment
//     post_comment(pr_number, &comment)?;

//     Ok(())
// }
